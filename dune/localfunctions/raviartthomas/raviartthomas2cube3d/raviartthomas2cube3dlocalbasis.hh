// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
#ifndef DUNE_LOCALFUNCTIONS_RAVIARTTHOMAS2_CUBE3D_LOCALBASIS_HH
#define DUNE_LOCALFUNCTIONS_RAVIARTTHOMAS2_CUBE3D_LOCALBASIS_HH

#include <vector>

#include <dune/common/fmatrix.hh>

#include "../../common/localbasis.hh"

namespace Dune
{
  /**
   * \ingroup LocalBasisImplementation
   * \brief First order Raviart-Thomas shape functions on the reference hexahedron.
   *
   * \tparam D Type to represent the field in the domain.
   * \tparam R Type to represent the field in the range.
   *
   * \nosubgrouping
   */
  template<class D, class R>
  class RT2Cube3DLocalBasis
  {

  public:
    typedef LocalBasisTraits<D,3,Dune::FieldVector<D,3>,R,3,Dune::FieldVector<R,3>,
        Dune::FieldMatrix<R,3,3> > Traits;

    //! \brief Standard constructor
    RT2Cube3DLocalBasis ()
    {
      sign0 = sign1 = sign2 = sign3 = sign4 = sign5 = 1.0;
    }

    /**
     * \brief Make set number s, where 0 <= s < 64
     *
     * \param s Edge orientation indicator
     */
    RT2Cube3DLocalBasis (unsigned int s)
    {
      sign0 = sign1 = sign2 = sign3 = sign4 = sign5 = 1.0;
      if (s & 1)
      {
        sign0 = -1.0;
      }
      if (s & 2)
      {
        sign1 = -1.0;
      }
      if (s & 4)
      {
        sign2 = -1.0;
      }
      if (s & 8)
      {
        sign3 = -1.0;
      }
      if (s & 16)
      {
        sign4 = -1.0;
      }
      if (s & 32)
      {
        sign5 = -1.0;
      }
    }

    //! \brief number of shape functions
    unsigned int size () const
    {
      return 108;
    }

    /**
     * \brief Evaluate all shape functions
     *
     * \param in Position
     * \param out return value
     */
    inline void evaluateFunction (const typename Traits::DomainType& in,
                                  std::vector<typename Traits::RangeType>& out) const
    {
      out.resize(108);
      std::vector<std::vector<double> > l(3,std::vector<double> (3));
      l[0][0]=(-1.0+2.0*in[0]);
      l[0][1]=(-1.0+2.0*in[1]);
      l[0][2]=(-1.0+2.0*in[2]);
      l[1][0]=(1.0-6.0*in[0]+6.0*pow(in[0],2));
      l[1][1]=(1.0-6.0*in[1]+6.0*pow(in[1],2));
      l[1][2]=(1.0-6.0*in[2]+6.0*pow(in[2],2));
      l[2][0]=(-1.0+12.0*in[0]-30.0*pow(in[0],2)+20.0*pow(in[0],3));
      l[2][1]=(-1.0+12.0*in[1]-30.0*pow(in[1],2)+20.0*pow(in[1],3));
      l[2][2]=(-1.0+12.0*in[2]-30.0*pow(in[2],2)+20.0*pow(in[2],3));

      // face 0
      out[0][0]=sign0*(0.5*(-l[1][0])+0.5*l[2][0]);
      out[0][1]=0.0;
      out[0][2]=0.0;
      out[1][0]=-(1.5)*l[1][0]*l[0][2]+1.5*l[2][0]*l[0][2];
      out[1][1]=0.0;
      out[1][2]=0.0;
      out[2][0]=sign0*(-(2.5)*l[1][0]*l[1][2]+2.5*l[2][0]*l[1][2]);
      out[2][1]=0.0;
      out[2][2]=0.0;
      out[3][0]=-(1.5)*l[1][0]*l[0][1]+1.5*l[2][0]*l[0][1];
      out[3][1]=0.0;
      out[3][2]=0.0;
      out[4][0]=-(4.5)*l[1][0]*l[0][1]*l[0][2]+4.5*l[2][0]*l[0][1]*l[0][2];
      out[4][1]=0.0;
      out[4][2]=0.0;
      out[5][0]=sign0*(-(7.5)*l[1][0]*l[0][1]*l[1][2]+7.5*l[2][0]*l[0][1]*l[1][2]);
      out[5][1]=0.0;
      out[5][2]=0.0;
      out[6][0]=sign0*(-(2.5)*l[1][0]*l[1][1]+2.5*l[2][0]*l[1][1]);
      out[6][1]=0.0;
      out[6][2]=0.0;
      out[7][0]=sign0*(-(7.5)*l[1][0]*l[1][1]*l[0][2]+7.5*l[2][0]*l[1][1]*l[0][2]);
      out[7][1]=0.0;
      out[7][2]=0.0;
      out[8][0]=sign0*(-(12.5)*l[1][0]*l[1][1]*l[1][2]+12.5*l[2][0]*l[1][1]*l[1][2]);
      out[8][1]=0.0;
      out[8][2]=0.0;

      // face 1
      out[9][0]=sign1*(0.5*l[1][0]+0.5*l[2][0]);
      out[9][1]=0.0;
      out[9][2]=0.0;
      out[10][0]=1.5*l[1][0]*l[0][2]+1.5*l[2][0]*l[0][2];
      out[10][1]=0.0;
      out[10][2]=0.0;
      out[11][0]=sign1*(2.5*l[1][0]*l[1][2]+2.5*l[2][0]*l[1][2]);
      out[11][1]=0.0;
      out[11][2]=0.0;
      out[12][0]=1.5*l[1][0]*l[0][1]+1.5*l[2][0]*l[0][1];
      out[12][1]=0.0;
      out[12][2]=0.0;
      out[13][0]=4.5*l[1][0]*l[0][1]*l[0][2]+4.5*l[2][0]*l[0][1]*l[0][2];
      out[13][1]=0.0;
      out[13][2]=0.0;
      out[14][0]=sign1*(7.5*l[1][0]*l[0][1]*l[1][2]+7.5*l[2][0]*l[0][1]*l[1][2]);
      out[14][1]=0.0;
      out[14][2]=0.0;
      out[15][0]=sign1*(2.5*l[1][0]*l[1][1]+2.5*l[2][0]*l[1][1]);
      out[15][1]=0.0;
      out[15][2]=0.0;
      out[16][0]=sign1*(7.5*l[1][0]*l[1][1]*l[0][2]+7.5*l[2][0]*l[1][1]*l[0][2]);
      out[16][1]=0.0;
      out[16][2]=0.0;
      out[17][0]=sign1*(12.5*l[1][0]*l[1][1]*l[1][2]+12.5*l[2][0]*l[1][1]*l[1][2]);
      out[17][1]=0.0;
      out[17][2]=0.0;

      // face 2
      out[18][0]=0.0;
      out[18][1]=sign2*(0.5*(-l[1][1])+0.5*l[2][1]);
      out[18][2]=0.0;
      out[19][0]=0.0;
      out[19][1]=-(1.5)*l[1][1]*l[0][2]+1.5*l[2][1]*l[0][2];
      out[19][2]=0.0;
      out[20][0]=0.0;
      out[20][1]=sign2*(-(2.5)*l[1][1]*l[1][2]+2.5*l[2][1]*l[1][2]);
      out[20][2]=0.0;
      out[21][0]=0.0;
      out[21][1]=-(1.5)*l[0][0]*l[1][1]+1.5*l[0][0]*l[2][1];
      out[21][2]=0.0;
      out[22][0]=0.0;
      out[22][1]=-(4.5)*l[0][0]*l[1][1]*l[0][2]+4.5*l[0][0]*l[2][1]*l[0][2];
      out[22][2]=0.0;
      out[23][0]=0.0;
      out[23][1]=sign2*(-(7.5)*l[0][0]*l[1][1]*l[1][2]+7.5*l[0][0]*l[2][1]*l[1][2]);
      out[23][2]=0.0;
      out[24][0]=0.0;
      out[24][1]=sign2*(-(2.5)*l[1][0]*l[1][1]+2.5*l[1][0]*l[2][1]);
      out[24][2]=0.0;
      out[25][0]=0.0;
      out[25][1]=sign2*(-(7.5)*l[1][0]*l[1][1]*l[0][2]+7.5*l[1][0]*l[2][1]*l[0][2]);
      out[25][2]=0.0;
      out[26][0]=0.0;
      out[26][1]=sign2*(-(12.5)*l[1][0]*l[1][1]*l[1][2]+12.5*l[1][0]*l[2][1]*l[1][2]);
      out[26][2]=0.0;

      // face 3
      out[27][0]=0.0;
      out[27][1]=sign3*(0.5*l[1][1]+0.5*l[2][1]);
      out[27][2]=0.0;
      out[28][0]=0.0;
      out[28][1]=1.5*l[1][1]*l[0][2]+1.5*l[2][1]*l[0][2];
      out[28][2]=0.0;
      out[29][0]=0.0;
      out[29][1]=sign3*(2.5*l[1][1]*l[1][2]+2.5*l[2][1]*l[1][2]);
      out[29][2]=0.0;
      out[30][0]=0.0;
      out[30][1]=1.5*l[0][0]*l[1][1]+1.5*l[0][0]*l[2][1];
      out[30][2]=0.0;
      out[31][0]=0.0;
      out[31][1]=4.5*l[0][0]*l[1][1]*l[0][2]+4.5*l[0][0]*l[2][1]*l[0][2];
      out[31][2]=0.0;
      out[32][0]=0.0;
      out[32][1]=sign3*(7.5*l[0][0]*l[1][1]*l[1][2]+7.5*l[0][0]*l[2][1]*l[1][2]);
      out[32][2]=0.0;
      out[33][0]=0.0;
      out[33][1]=sign3*(2.5*l[1][0]*l[1][1]+2.5*l[1][0]*l[2][1]);
      out[33][2]=0.0;
      out[34][0]=0.0;
      out[34][1]=sign3*(7.5*l[1][0]*l[1][1]*l[0][2]+7.5*l[1][0]*l[2][1]*l[0][2]);
      out[34][2]=0.0;
      out[35][0]=0.0;
      out[35][1]=sign3*(12.5*l[1][0]*l[1][1]*l[1][2]+12.5*l[1][0]*l[2][1]*l[1][2]);
      out[35][2]=0.0;

      // face 4
      out[36][0]=0.0;
      out[36][1]=0.0;
      out[36][2]=sign4*(0.5*(-l[1][2])+0.5*l[2][2]);
      out[37][0]=0.0;
      out[37][1]=0.0;
      out[37][2]=-(1.5)*l[0][1]*l[1][2]+1.5*l[0][1]*l[2][2];
      out[38][0]=0.0;
      out[38][1]=0.0;
      out[38][2]=sign4*(-(2.5)*l[1][1]*l[1][2]+2.5*l[1][1]*l[2][2]);
      out[39][0]=0.0;
      out[39][1]=0.0;
      out[39][2]=-(1.5)*l[0][0]*l[1][2]+1.5*l[0][0]*l[2][2];
      out[40][0]=0.0;
      out[40][1]=0.0;
      out[40][2]=-(4.5)*l[0][0]*l[0][1]*l[1][2]+4.5*l[0][0]*l[0][1]*l[2][2];
      out[41][0]=0.0;
      out[41][1]=0.0;
      out[41][2]=sign4*(-(7.5)*l[0][0]*l[1][1]*l[1][2]+7.5*l[0][0]*l[1][1]*l[2][2]);
      out[42][0]=0.0;
      out[42][1]=0.0;
      out[42][2]=sign4*(-(2.5)*l[1][0]*l[1][2]+2.5*l[1][0]*l[2][2]);
      out[43][0]=0.0;
      out[43][1]=0.0;
      out[43][2]=sign4*(-(7.5)*l[1][0]*l[0][1]*l[1][2]+7.5*l[1][0]*l[0][1]*l[2][2]);
      out[44][0]=0.0;
      out[44][1]=0.0;
      out[44][2]=sign4*(-(12.5)*l[1][0]*l[1][1]*l[1][2]+12.5*l[1][0]*l[1][1]*l[2][2]);

      // face 5
      out[45][0]=0.0;
      out[45][1]=0.0;
      out[45][2]=sign5*(0.5*l[1][2]+0.5*l[2][2]);
      out[46][0]=0.0;
      out[46][1]=0.0;
      out[46][2]=1.5*l[0][1]*l[1][2]+1.5*l[0][1]*l[2][2];
      out[47][0]=0.0;
      out[47][1]=0.0;
      out[47][2]=sign5*(2.5*l[1][1]*l[1][2]+2.5*l[1][1]*l[2][2]);
      out[48][0]=0.0;
      out[48][1]=0.0;
      out[48][2]=1.5*l[0][0]*l[1][2]+1.5*l[0][0]*l[2][2];
      out[49][0]=0.0;
      out[49][1]=0.0;
      out[49][2]=4.5*l[0][0]*l[0][1]*l[1][2]+4.5*l[0][0]*l[0][1]*l[2][2];
      out[50][0]=0.0;
      out[50][1]=0.0;
      out[50][2]=sign5*(7.5*l[0][0]*l[1][1]*l[1][2]+7.5*l[0][0]*l[1][1]*l[2][2]);
      out[51][0]=0.0;
      out[51][1]=0.0;
      out[51][2]=sign5*(2.5*l[1][0]*l[1][2]+2.5*l[1][0]*l[2][2]);
      out[52][0]=0.0;
      out[52][1]=0.0;
      out[52][2]=sign5*(7.5*l[1][0]*l[0][1]*l[1][2]+7.5*l[1][0]*l[0][1]*l[2][2]);
      out[53][0]=0.0;
      out[53][1]=0.0;
      out[53][2]=sign5*(12.5*l[1][0]*l[1][1]*l[1][2]+12.5*l[1][0]*l[1][1]*l[2][2]);

      // element
      out[54][0]=1.0-l[1][0];
      out[54][1]=0.0;
      out[54][2]=0.0;
      out[55][0]=3.0*l[0][2]-3.0*l[1][0]*l[0][2];
      out[55][1]=0.0;
      out[55][2]=0.0;
      out[56][0]=5.0*l[1][2]-5.0*l[1][0]*l[1][2];
      out[56][1]=0.0;
      out[56][2]=0.0;
      out[57][0]=3.0*l[0][1]-3.0*l[1][0]*l[0][1];
      out[57][1]=0.0;
      out[57][2]=0.0;
      out[58][0]=9.0*l[0][1]*l[0][2]-9.0*l[1][0]*l[0][1]*l[0][2];
      out[58][1]=0.0;
      out[58][2]=0.0;
      out[59][0]=15.0*l[0][1]*l[1][2]-15.0*l[1][0]*l[0][1]*l[1][2];
      out[59][1]=0.0;
      out[59][2]=0.0;
      out[60][0]=5.0*l[1][1]-5.0*l[1][0]*l[1][1];
      out[60][1]=0.0;
      out[60][2]=0.0;
      out[61][0]=15.0*l[1][1]*l[0][2]-15.0*l[1][0]*l[1][1]*l[0][2];
      out[61][1]=0.0;
      out[61][2]=0.0;
      out[62][0]=25.0*l[1][1]*l[1][2]-25.0*l[1][0]*l[1][1]*l[1][2];
      out[62][1]=0.0;
      out[62][2]=0.0;
      out[63][0]=3.0*l[0][0]-3.0*l[2][0];
      out[63][1]=0.0;
      out[63][2]=0.0;
      out[64][0]=9.0*l[0][0]*l[0][2]-9.0*l[2][0]*l[0][2];
      out[64][1]=0.0;
      out[64][2]=0.0;
      out[65][0]=15.0*l[0][0]*l[1][2]-15.0*l[2][0]*l[1][2];
      out[65][1]=0.0;
      out[65][2]=0.0;
      out[66][0]=9.0*l[0][0]*l[0][1]-9.0*l[2][0]*l[0][1];
      out[66][1]=0.0;
      out[66][2]=0.0;
      out[67][0]=27.0*l[0][0]*l[0][1]*l[0][2]-27.0*l[2][0]*l[0][1]*l[0][2];
      out[67][1]=0.0;
      out[67][2]=0.0;
      out[68][0]=45.0*l[0][0]*l[0][1]*l[1][2]-45.0*l[2][0]*l[0][1]*l[1][2];
      out[68][1]=0.0;
      out[68][2]=0.0;
      out[69][0]=15.0*l[0][0]*l[1][1]-15.0*l[2][0]*l[1][1];
      out[69][1]=0.0;
      out[69][2]=0.0;
      out[70][0]=45.0*l[0][0]*l[1][1]*l[0][2]-45.0*l[2][0]*l[1][1]*l[0][2];
      out[70][1]=0.0;
      out[70][2]=0.0;
      out[71][0]=75.0*l[0][0]*l[1][1]*l[1][2]-75.0*l[2][0]*l[1][1]*l[1][2];
      out[71][1]=0.0;
      out[71][2]=0.0;
      out[72][0]=0.0;
      out[72][1]=1.0-l[1][1];
      out[72][2]=0.0;
      out[73][0]=0.0;
      out[73][1]=3.0*l[0][2]-3.0*l[1][1]*l[0][2];
      out[73][2]=0.0;
      out[74][0]=0.0;
      out[74][1]=5.0*l[1][2]-5.0*l[1][1]*l[1][2];
      out[74][2]=0.0;
      out[75][0]=0.0;
      out[75][1]=3.0*l[0][1]-3.0*l[2][1];
      out[75][2]=0.0;
      out[76][0]=0.0;
      out[76][1]=9.0*l[0][1]*l[0][2]-9.0*l[2][1]*l[0][2];
      out[76][2]=0.0;
      out[77][0]=0.0;
      out[77][1]=15.0*l[0][1]*l[1][2]-15.0*l[2][1]*l[1][2];
      out[77][2]=0.0;
      out[78][0]=0.0;
      out[78][1]=3.0*l[0][0]-3.0*l[0][0]*l[1][1];
      out[78][2]=0.0;
      out[79][0]=0.0;
      out[79][1]=9.0*l[0][0]*l[0][2]-9.0*l[0][0]*l[1][1]*l[0][2];
      out[79][2]=0.0;
      out[80][0]=0.0;
      out[80][1]=15.0*l[0][0]*l[1][2]-15.0*l[0][0]*l[1][1]*l[1][2];
      out[80][2]=0.0;
      out[81][0]=0.0;
      out[81][1]=9.0*l[0][0]*l[0][1]-9.0*l[0][0]*l[2][1];
      out[81][2]=0.0;
      out[82][0]=0.0;
      out[82][1]=27.0*l[0][0]*l[0][1]*l[0][2]-27.0*l[0][0]*l[2][1]*l[0][2];
      out[82][2]=0.0;
      out[83][0]=0.0;
      out[83][1]=45.0*l[0][0]*l[0][1]*l[1][2]-45.0*l[0][0]*l[2][1]*l[1][2];
      out[83][2]=0.0;
      out[84][0]=0.0;
      out[84][1]=5.0*l[1][0]-5.0*l[1][0]*l[1][1];
      out[84][2]=0.0;
      out[85][0]=0.0;
      out[85][1]=15.0*l[1][0]*l[0][2]-15.0*l[1][0]*l[1][1]*l[0][2];
      out[85][2]=0.0;
      out[86][0]=0.0;
      out[86][1]=25.0*l[1][0]*l[1][2]-25.0*l[1][0]*l[1][1]*l[1][2];
      out[86][2]=0.0;
      out[87][0]=0.0;
      out[87][1]=15.0*l[1][0]*l[0][1]-15.0*l[1][0]*l[2][1];
      out[87][2]=0.0;
      out[88][0]=0.0;
      out[88][1]=45.0*l[1][0]*l[0][1]*l[0][2]-45.0*l[1][0]*l[2][1]*l[0][2];
      out[88][2]=0.0;
      out[89][0]=0.0;
      out[89][1]=75.0*l[1][0]*l[0][1]*l[1][2]-75.0*l[1][0]*l[2][1]*l[1][2];
      out[89][2]=0.0;
      out[90][0]=0.0;
      out[90][1]=0.0;
      out[90][2]=1.0-l[1][2];
      out[91][0]=0.0;
      out[91][1]=0.0;
      out[91][2]=3.0*l[0][2]-3.0*l[2][2];
      out[92][0]=0.0;
      out[92][1]=0.0;
      out[92][2]=3.0*l[0][1]-3.0*l[0][1]*l[1][2];
      out[93][0]=0.0;
      out[93][1]=0.0;
      out[93][2]=9.0*l[0][1]*l[0][2]-9.0*l[0][1]*l[2][2];
      out[94][0]=0.0;
      out[94][1]=0.0;
      out[94][2]=5.0*l[1][1]-5.0*l[1][1]*l[1][2];
      out[95][0]=0.0;
      out[95][1]=0.0;
      out[95][2]=15.0*l[1][1]*l[0][2]-15.0*l[1][1]*l[2][2];
      out[96][0]=0.0;
      out[96][1]=0.0;
      out[96][2]=3.0*l[0][0]-3.0*l[0][0]*l[1][2];
      out[97][0]=0.0;
      out[97][1]=0.0;
      out[97][2]=9.0*l[0][0]*l[0][2]-9.0*l[0][0]*l[2][2];
      out[98][0]=0.0;
      out[98][1]=0.0;
      out[98][2]=9.0*l[0][0]*l[0][1]-9.0*l[0][0]*l[0][1]*l[1][2];
      out[99][0]=0.0;
      out[99][1]=0.0;
      out[99][2]=27.0*l[0][0]*l[0][1]*l[0][2]-27.0*l[0][0]*l[0][1]*l[2][2];
      out[100][0]=0.0;
      out[100][1]=0.0;
      out[100][2]=15.0*l[0][0]*l[1][1]-15.0*l[0][0]*l[1][1]*l[1][2];
      out[101][0]=0.0;
      out[101][1]=0.0;
      out[101][2]=45.0*l[0][0]*l[1][1]*l[0][2]-45.0*l[0][0]*l[1][1]*l[2][2];
      out[102][0]=0.0;
      out[102][1]=0.0;
      out[102][2]=5.0*l[1][0]-5.0*l[1][0]*l[1][2];
      out[103][0]=0.0;
      out[103][1]=0.0;
      out[103][2]=15.0*l[1][0]*l[0][2]-15.0*l[1][0]*l[2][2];
      out[104][0]=0.0;
      out[104][1]=0.0;
      out[104][2]=15.0*l[1][0]*l[0][1]-15.0*l[1][0]*l[0][1]*l[1][2];
      out[105][0]=0.0;
      out[105][1]=0.0;
      out[105][2]=45.0*l[1][0]*l[0][1]*l[0][2]-45.0*l[1][0]*l[0][1]*l[2][2];
      out[106][0]=0.0;
      out[106][1]=0.0;
      out[106][2]=25.0*l[1][0]*l[1][1]-25.0*l[1][0]*l[1][1]*l[1][2];
      out[107][0]=0.0;
      out[107][1]=0.0;
      out[107][2]=75.0*l[1][0]*l[1][1]*l[0][2]-75.0*l[1][0]*l[1][1]*l[2][2];
    }

    /**
     * \brief Evaluate Jacobian of all shape functions
     *
     * \param in Position
     * \param out return value
     */
    inline void evaluateJacobian (const typename Traits::DomainType& in,
                                  std::vector<typename Traits::JacobianType>& out) const
    {
      out.resize(108);
    }

    //! \brief Polynomial order of the shape functions
    unsigned int order () const
    {
      return 7;
    }

  private:
    R sign0, sign1, sign2, sign3, sign4, sign5;
  };
}
#endif // DUNE_LOCALFUNCTIONS_RAVIARTTHOMAS2_CUBE3D_LOCALBASIS_HH
